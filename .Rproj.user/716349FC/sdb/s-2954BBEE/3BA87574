{
    "contents" : "#########################################################################\n## Functions to cache a matrix and it's inversion                      ##\n#########################################################################\n##\n##     function makeCacheMatrix() :\n##\n##              creates a new list, which contains 4 function elements:\n##              $get() - will return the original matrix\n##              $set() - can be use to set a new matrix\n##              $setinversed() - function to set the inverted matrix\n##              $getinversed() - will return the inverted matrix\n##\n##     function makeCacheMatrix() :\n##\n##              a function which can be used to calculate inverse of \n##              the above kind of list matrix\n##\n#########################################################################\n##\n## How to use these functions\n## Creating a cached matrix\n##     source(\"cachematrix.R\")\n##     a<-matrix(1:4,nrow=2,ncol=2)\n##     mat<-makeCacheMatrix(a)\n\n## now following line should return null\n##     mat$getinversed()\n\n## calculate the inversion\n##     cacheSolve(mat)\n## now\n##     mat$getinversed wil return \n##        [,1] [,2]\n##  [1,]   -2  1.5\n##  [2,]    1 -0.5\n##\n#########################################################################\n\n\n\n#########################################################################\n## This function encupsulates a matrix and it's inversion,\n## function returns a list of 4 member functions\n##\n## Note! In set function the cached inversion is cleared only \n## if the new matrix y isn't identical with existing matrix x\n##\n## Note! In setinversed function, the solvedData parameter is accepted only if\n## it's a matrix and it has same row and column count than stored x\n#########################################################################\nmakeCacheMatrix <- function(x = matrix()) \n{\n        \n        cachedInversion <- NULL\n        \n        set <- function(y) \n        {\n                if (!identical(x,y)) \n                {\n                        x <<- y\n                        cachedInversion <<- NULL\n                }\n                \n        }\n        \n        get <- function() x\n        \n        setinversed <- function(solvedData) \n        {\n                if (is.matrix(solvedData))\n                {\n                        if (identical(dim(x), dim(solvedData)))                \n                        {\n                                cachedInversion <<- solvedData\n                        }\n                        else stop(\"matrix dimensions doesn't match\")\n                }\n                else stop(\"given parameter isn't matrix\")\n        }\n        \n        getinversed<- function() cachedInversion\n        \n        list(set = set, get = get,\n             setinversed = setinversed,\n             getinversed = getinversed)\n        \n                        \n}\n\n\n#########################################################################\n## Return a matrix that is the inverse of 'x' and cache it into 'x'\n##\n## Note! This function assumes that x is invertible\n## and matrix is square (count of columns is same as count of rows)\n#########################################################################\ncacheSolve <- function(x, ...) \n{        \n\n        ## check that x is actual correct data type ie. list      \n        ## and the list contains correct functions\n        if (is.list(x)) \n        {\n                if (identical(names(x),c(\"set\",\"get\",\"setinversed\",\"getinversed\")))\n                {\n                        ## first we get the data out of x\n                        ## if it contains the inversed matrix, return it        \n                        solved <- x$getinversed()                       \n                        if(!is.null(solved)) \n                        {\n                                message(\"getting the already inversed matrix\")\n                                return(solved)\n                        }\n                \n                        \n                        ## if the inverted matrix isn't calculated, we calculate it\n                        ## and store it into the x\n                        data <- x$get()\n                        solved <- solve(data, ...)\n                        x$setinversed(solved)\n                        solved\n                }\n                else stop(\"x doesn't contain needed functions\")\n        } \n        else stop(\"x is not a list\")             \n}\n",
    "created" : 1423736881966.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4129238834",
    "id" : "3BA87574",
    "lastKnownWriteTime" : 1423750389,
    "path" : "W:/programming/R/ProgrammingAssignment2/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}